import {cleanup, fireEvent, render, type RenderResult, waitFor} from '@testing-library/svelte'
import {afterEach, describe, expect} from 'vitest'
import {mock} from 'vitest-mock-extended'
import type {OffersModificationPresentation} from '$lib/frontend/presentations/OffersModificationPresentation'
import '@testing-library/jest-dom'
import OffersModificationModal from '$lib/frontend/components/OffersModificationModal.svelte'
import {SvelteComponent} from 'svelte'
import type {ModalStore, ToastStore} from '@skeletonlabs/skeleton'
import {currentModalSettings} from '$mocks/src/lib/frontend/stores/ModalStore'
import type {CategorySummaryPresentation} from '$lib/frontend/presentations/CategorySummaryPresentation'

describe('OffersModificationModal', () => {

    const title = 'Offers Modification Modal'
    const body = 'the body'
    const buttonTextCancel = 'Cancel'
    const buttonTextSubmit = 'Submit'

    const taxCategories = ['taxCategory1', 'taxCategory2']
    const units = ['Centiliter', 'Liter', 'Milliliter', 'Kilogram', 'Gram', 'Milligram', 'Piece']

    const offerId = 'ordered-item-id'
    const price = 100.99
    const name = 'ordered-item-name'
    const unit = 'Centiliter'
    const image = 'https://cdn-cemal.nitrocdn.com/iwTMUnSsYeigzDpMWgwdBZhpcIeWwszq/assets/images/optimized/rev-59c8081/www.aaronfaber.com/wp-content/uploads/2017/03/product-placeholder-wp-95907_800x675.jpg'
    const categories = mock<CategorySummaryPresentation[]>([
        mock<CategorySummaryPresentation>({
            name: 'category1',
        }),
        mock<CategorySummaryPresentation>({
            name: 'category2',
        }),
    ])
    const quantity = 10
    const taxCategory = 'taxCategory1'
    const barCode = '1234567890'
    const inventory = 100
    const description = 'a very good description'
    const newlyCreatedCategory = 'Newly created Category'

    const offer = mock<OffersModificationPresentation>({
        id: offerId,
        price,
        name,
        quantity,
        unit,
        image,
        categories,
        taxCategory,
        barCode,
        inventory,
        description,
    })

    let view: RenderResult<OffersModificationModal, typeof import('@testing-library/dom/types/queries')>

    beforeEach(() => {

        currentModalSettings.title = title
        currentModalSettings.body = body
        currentModalSettings.buttonTextCancel = buttonTextCancel
        currentModalSettings.buttonTextSubmit = buttonTextSubmit

        currentModalSettings.meta = {
            taxCategories,
            units,
        }

        view = render(OffersModificationModal, {
            props: getComponentProperties(),
        })
    })

    describe('Structure', () => {

        beforeEach(() => {
            rerender()
        })

        describe('always', () => {

            it('should have match snapshot', () => {

                expect(view.container).toMatchSnapshot()
            })

            it('should include a title', () => {

                const titleElement = view.getByText(title)
                expect(titleElement).toBeInTheDocument()
            })

            it('should include a body', () => {

                const bodyElement = view.getByText(body)
                expect(bodyElement).toBeInTheDocument()
            })

            it('should include a cancel button', () => {

                const cancelButton = view.getByText(buttonTextCancel)
                expect(cancelButton).toBeInTheDocument()
            })

            it('should include a submit button', () => {

                const submitButton = view.getByText(buttonTextSubmit)
                expect(submitButton).toBeInTheDocument()
            })
        })

        describe('when used for creating a new offer', () => {

            beforeEach(() => {
                currentModalSettings.meta.offer = undefined
                rerender()
            })

            it('should match snapshot', () => {

                expect(view.container).toMatchSnapshot()
            })
        })

        describe('when used for modifying existing offer', () => {

            beforeEach(() => {
                currentModalSettings.meta.offer = offer
                rerender()
            })

            it('should match snapshot', () => {

                expect(view.container).toMatchSnapshot()
            })
        })
    })

    describe('Behavior', () => {

        describe('when all the required fields of the form were filled', () => {

            beforeEach(() => {
                currentModalSettings.meta.offer = offer
                rerender()
            })

            describe('in all scenarios', () => {

                it('should enable the submit button', () => {

                    const submitButton = view.getByText(buttonTextSubmit)
                    expect(submitButton).not.toBeDisabled()
                })
            })

            describe('but in the context of creation', () => {

                beforeEach(async () => {
                    currentModalSettings.meta.offer = undefined
                    rerender()

                    const imageDataBlob = new Blob([''], { type: 'image/jpegbase64'})
                    const imageDataBlobPart = (await blobToArrayBuffer(imageDataBlob)) as ArrayBuffer
                    await fireEvent.input(view.getByTestId('image-file-input'), {
                        target: {
                            files: [new File([imageDataBlobPart], 'image.png', {type: 'image/png'})],
                        },
                    })
                    //Wait for image data to be loaded into cropper
                    await waitFor(() => view.getByTestId('cropper'))

                    await fireEvent.input(view.getByTestId('name-input'), { target: { value: name } })
                    await fireEvent.input(view.getByTestId('price-input'), { target: { value: price } })
                    await fireEvent.input(view.getByTestId('quantity-input'), { target: { value: quantity } })
                    await fireEvent.select(view.getByTestId('unit-select'), { target: { value: unit } })
                    await fireEvent.input(view.getByTestId('barcode-input'), { target: { value: barCode } })
                    await fireEvent.input(view.getByTestId('inventory-input'), { target: { value: inventory } })

                    const categoriesChipsInput = view.getByPlaceholderText('Entrez le nom d\'une catégorie')
                    await fireEvent.input(categoriesChipsInput, { target: { value: newlyCreatedCategory}})
                    const categoriesChipsForm = categoriesChipsInput.parentElement as HTMLFormElement
                    categoriesChipsForm.requestSubmit()

                    const taxCategoryButton = view.getByTestId(taxCategory)
                    taxCategoryButton.click()

                    const submitButton = await waitFor(() => view.getByText(buttonTextSubmit))
                    expect(submitButton).not.toBeDisabled()
                })

                it('should disable the submit button if the picked image file was removed by clicking on "clear-image-button"', async () => {

                    const clearImageButton = await waitFor(() => view.getByTestId('clear-image-button'))

                    clearImageButton.click()

                    await assertSubmitButtonIsDisabled()
                })

                it('should disable the submit button if the name is set to an empty string', async () => {
                    await fireEvent.input(view.getByTestId('name-input'), { target: { value: ''} })

                    await assertSubmitButtonIsDisabled()
                })

                test.each([
                    ['0'],
                    ['-1'],
                    ['sadas'],
                ])('should disable the submit button if the price is set to "%s"', async (price) => {
                    await fireEvent.input(view.getByTestId('price-input'), { target: { value: price} })

                    await assertSubmitButtonIsDisabled()
                })

                test.each([
                    ['0'],
                    ['-1'],
                    ['sadas'],
                ])('should disable the submit button if the quantity is set to "%s"', async (quantity) => {
                    await fireEvent.input(view.getByTestId('quantity-input'), { target: { value: quantity} })

                    await assertSubmitButtonIsDisabled()
                })

                test.each([
                    ['0'],
                    ['-1'],
                    ['sadas'],
                ])('should disable the submit button if the inventory is set to "%s"', async (value) => {
                    await fireEvent.input(view.getByTestId('inventory-input'), { target: { value } })

                    await assertSubmitButtonIsDisabled()
                })

                test.each([
                    [''],
                ])('should disable the submit button if the barcode is set to "%s"', async (value) => {
                    await fireEvent.input(view.getByTestId('barcode-input'), { target: { value } })

                    await assertSubmitButtonIsDisabled()
                })

                it('should disable the submit button when the entered category is removed', async () => {
                    const newCategoryElements = view.getAllByText(newlyCreatedCategory)
                    const newCategoryButton = newCategoryElements[1].parentElement as HTMLButtonElement

                    newCategoryButton.click()

                    await assertSubmitButtonIsDisabled()
                })

                async function assertSubmitButtonIsDisabled() {
                    const submitButton = await waitFor(() => view.getByText(buttonTextSubmit))
                    expect(submitButton).toBeDisabled()
                }
            })
        })
    })

    function rerender() {
        view.unmount()
        view = render(OffersModificationModal, {
            props: getComponentProperties(),
        })
    }

    function getComponentProperties() {
        return {
            parent: mock<SvelteComponent>(),
        }
    }

    function blobToArrayBuffer(blob: Blob): Promise<string | ArrayBuffer | null> {
        return new Promise((resolve, reject) => {
            const reader = new FileReader()
            reader.onloadend = () => resolve(reader.result)
            reader.onerror = reject
            reader.readAsArrayBuffer(blob)
        })
    }

    afterEach(() => {
        cleanup()
        vi.clearAllMocks()
    })
})

vi.mock('@skeletonlabs/skeleton', async () => {
    const actual = await import('@skeletonlabs/skeleton')
    const {modalStore} = await import('$mocks/src/lib/frontend/stores/ModalStore')
    const {toastStore} = await import('$mocks/src/lib/frontend/stores/ToastStore')
    return {
        ...actual,
        getModalStore: (): ModalStore => modalStore,
        getToastStore: (): ToastStore => toastStore,
    }
})
